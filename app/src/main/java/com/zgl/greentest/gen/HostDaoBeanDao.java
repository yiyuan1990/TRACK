package com.zgl.greentest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zkkc.track.entity.HostDaoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOST_DAO_BEAN".
*/
public class HostDaoBeanDao extends AbstractDao<HostDaoBean, Long> {

    public static final String TABLENAME = "HOST_DAO_BEAN";

    /**
     * Properties of entity HostDaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property HIp = new Property(2, String.class, "hIp", false, "H_IP");
        public final static Property HPort = new Property(3, String.class, "hPort", false, "H_PORT");
        public final static Property HName = new Property(4, String.class, "hName", false, "H_NAME");
        public final static Property HPw = new Property(5, String.class, "hPw", false, "H_PW");
        public final static Property SIp = new Property(6, String.class, "sIp", false, "S_IP");
        public final static Property SPort = new Property(7, String.class, "sPort", false, "S_PORT");
        public final static Property MState = new Property(8, String.class, "mState", false, "M_STATE");
    }


    public HostDaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HostDaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOST_DAO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"H_IP\" TEXT," + // 2: hIp
                "\"H_PORT\" TEXT," + // 3: hPort
                "\"H_NAME\" TEXT," + // 4: hName
                "\"H_PW\" TEXT," + // 5: hPw
                "\"S_IP\" TEXT," + // 6: sIp
                "\"S_PORT\" TEXT," + // 7: sPort
                "\"M_STATE\" TEXT);"); // 8: mState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOST_DAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HostDaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String hIp = entity.getHIp();
        if (hIp != null) {
            stmt.bindString(3, hIp);
        }
 
        String hPort = entity.getHPort();
        if (hPort != null) {
            stmt.bindString(4, hPort);
        }
 
        String hName = entity.getHName();
        if (hName != null) {
            stmt.bindString(5, hName);
        }
 
        String hPw = entity.getHPw();
        if (hPw != null) {
            stmt.bindString(6, hPw);
        }
 
        String sIp = entity.getSIp();
        if (sIp != null) {
            stmt.bindString(7, sIp);
        }
 
        String sPort = entity.getSPort();
        if (sPort != null) {
            stmt.bindString(8, sPort);
        }
 
        String mState = entity.getMState();
        if (mState != null) {
            stmt.bindString(9, mState);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HostDaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String hIp = entity.getHIp();
        if (hIp != null) {
            stmt.bindString(3, hIp);
        }
 
        String hPort = entity.getHPort();
        if (hPort != null) {
            stmt.bindString(4, hPort);
        }
 
        String hName = entity.getHName();
        if (hName != null) {
            stmt.bindString(5, hName);
        }
 
        String hPw = entity.getHPw();
        if (hPw != null) {
            stmt.bindString(6, hPw);
        }
 
        String sIp = entity.getSIp();
        if (sIp != null) {
            stmt.bindString(7, sIp);
        }
 
        String sPort = entity.getSPort();
        if (sPort != null) {
            stmt.bindString(8, sPort);
        }
 
        String mState = entity.getMState();
        if (mState != null) {
            stmt.bindString(9, mState);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HostDaoBean readEntity(Cursor cursor, int offset) {
        HostDaoBean entity = new HostDaoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hIp
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hPort
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hPw
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sIp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sPort
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // mState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HostDaoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHIp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHPort(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHPw(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSIp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSPort(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMState(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HostDaoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HostDaoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HostDaoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
